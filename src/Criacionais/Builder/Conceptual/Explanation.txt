Builder Design Pattern

Intenção: Permite que você construa objetos complexos passo a passo. O padrão permite
produzir diferentes tipos e representações de um objeto usando o
mesmo código de construção.

--- Código ---

(1): A interface builder especifica métodos para criar as
diferentes partes de objetos produto.

(2): As classes de construção concretas seguem a interface do
builder e fornecem implementações específicas das etapas
de construção. Seu programa pode ter algumas variações de
builders, cada uma implementada de forma diferente.

(3): Uma instância fresca do builder deve conter um objeto 
produto em branco na qual ela usa para montagem futura.

(4): Todas as etapas de produção trabalham com a mesma
instância de produto.

(5): Builders concretos devem fornecer seus próprios
métodos para recuperar os resultados. Isso porque
vários tipos de builders podem criar produtos
inteiramente diferentes que nem sempre seguem a mesma
interface. Portanto, tais métodos não podem ser
declarados na interface do builder (ao menos não em
uma linguagem de programação de tipo estático).

Geralmente, após retornar o resultado final para o
cliente, espera-se que uma instância de builder comece
a produzir outro produto. É por isso que é uma prática
comum chamar o método reset no final do corpo do método
`getProduct`. Contudo este comportamento não é
obrigatório, e você pode fazer seu builder esperar por
uma chamada explícita do reset a partir do código cliente
antes de se livrar de seu resultado anterior.

(6): Faz sentido usar o padrão Builder somente quando seus produtos 
são bastante complexos e requerem configuração extensa.
Ao contrário dos outros padrões criacionais, o Builder
permite que você construa produtos que não seguem uma
interface comum.

(7): O diretor é apenas responsável por executar as etapas de
construção em uma sequência em particular. Isso ajuda quando
os produtos devem seguir uma ordem de construção ou configuração específica.
A rigor, a classe diretor é opcional, já que o
cliente pode controlar os builders diretamente.

(8): O diretor trabalha com qualquer instância builder que
o código cliente passar a ele. Dessa forma, o código
cliente pode alterar o tipo final do produto recém
montado

(9): O diretor pode construir diversas variações do produto
usando as mesmas etapas de construção.

(10): O código cliente cria um objeto builder, passa ele para o
diretor e então inicia o processo de construção. O resultado
final é recuperado do objeto builder.

(11): Lembre-se, o padrão Builder pode ser usado sem uma classe de Diretor.