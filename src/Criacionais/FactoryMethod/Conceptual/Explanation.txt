Factory Method Design Pattern

Intenção: Fornece uma interface para a criação de objetos em uma superclasse, mas
permite que subclasses alterem o tipo de objetos que serão criados.

--- Código ---

(1): A classe Criadora declara o método de fabricação que devolver um objeto que implementa a Interface Produto. 
As subclasses do Criador geralmente fornecem o implementação deste método.

(2): Note que o Criador também pode fornecer alguma implementação padrão do método de fábrica.

(3): Observe também que, apesar de seu nome, a principal responsabilidade do Criador 
não é criar produtos. Normalmente, ela contém alguma lógica comercial central que
depende dos objetos do Produto, devolvidos pelo método de fabricação. As subclasses podem
indiretamente mudar essa lógica de negócios, substituindo o método de fabricação
e devolvendo um tipo de produto diferente dele.

(4): Chamar o método de fabricação para criar um objeto de Produto.

(5): Agora, use o produto.

(6): Criadores concretos substituem o método de fabricação a fim de mudar o tipo de produto resultante.

(7): Note que a assinatura do método ainda utiliza como retorno o produto abstrato,
mesmo que o retorno seja um produto concreto. Desta forma, o Criador pode permanecer independente.

(8): A interface do produto declara as operações que todos os produtos concretos devem
implementar.

(9): Os Produtos Concretos podem agora fornecer várias implementações da interface Produto.

(10): O código do cliente trabalha com uma instância de um criador concreto, embora através de
sua interface de base. Desde que o cliente continue trabalhando com o criador através da
interface base, você pode passá-la a qualquer subclasse do criador.

(11): A Aplicação escolhe o tipo de criador, dependendo da configuração ou
ambiente.